/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import main.Game;
import pokemon.AbstractPokemon;
import pokemon.AttackType;
import pokemon.Pokedex;

import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.FloatControl;
import javax.swing.*;
import java.io.File;
import java.util.Random;

/**
 * @author xpcDV
 */
public class PantallaCombate extends javax.swing.JFrame {

  /**
   * Creates new form PantallaCombate
   */
  Pokedex userPokedex;
  Pokedex cpuPokedex;

  AbstractPokemon actualUserPokemon;
  AbstractPokemon actualCPUPokemon;

  Random random = new Random();

  public PantallaCombate() {
    initComponents();
  }

  public PantallaCombate(Pokedex userPokedex, Pokedex cpuPokedex) {
    this.cpuPokedex = cpuPokedex;
    this.userPokedex = userPokedex;
    initComponents();


    System.out.println("User Pokedex: " + userPokedex);
    System.out.println("CPU Pokedex: " + cpuPokedex);
    startBattle();
  }

  public void startBattle() {
    updateCPUPokemon(cpuPokedex.getNextPokemon());
    updateUserPokemon(userPokedex.getNextPokemon());
  }

  public void updateUserPokemon(AbstractPokemon pokemon) {
    if (pokemon != null) {
      this.UserPokemon.setIcon(new ImageIcon(pokemon.getImageIcon()));
      HealthUserPokemon.setText("Vida: " + pokemon.getActualHP() + "/" + pokemon.getBaseHP());
      actualUserPokemon = pokemon;
    }
  }

  public void updateCPUPokemon(AbstractPokemon pokemon) {
    if (pokemon != null) {
      this.CPUPokemon.setIcon(new ImageIcon(pokemon.getImageIcon()));
      HealthCPUPokemon.setText("Vida: " + pokemon.getActualHP() + "/" + pokemon.getBaseHP());
      actualCPUPokemon = pokemon;
    }
  }


  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    UserPokemon = new javax.swing.JLabel();
    CPUPokemon = new javax.swing.JLabel();
    HealthCPUPokemonContainer = new javax.swing.JPanel();
    HealthCPUPokemon = new javax.swing.JLabel();
    jPanel1 = new javax.swing.JPanel();
    SpecialAttackBtn = new javax.swing.JButton();
    PhysicAttackBtn = new javax.swing.JButton();
    cambiarPokemonBtn = new javax.swing.JButton();
    jLabel1 = new javax.swing.JLabel();
    HealthCPUPokemon1 = new javax.swing.JPanel();
    HealthUserPokemon = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    UserPokemon.setText("UserPokemon");

    CPUPokemon.setText("CPUPokemon");

    HealthCPUPokemonContainer.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

    HealthCPUPokemon.setText("Vida");

    javax.swing.GroupLayout HealthCPUPokemonContainerLayout = new javax.swing.GroupLayout(HealthCPUPokemonContainer);
    HealthCPUPokemonContainer.setLayout(HealthCPUPokemonContainerLayout);
    HealthCPUPokemonContainerLayout.setHorizontalGroup(
            HealthCPUPokemonContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HealthCPUPokemonContainerLayout.createSequentialGroup()
                            .addGap(47, 47, 47)
                            .addComponent(HealthCPUPokemon)
                            .addContainerGap(56, Short.MAX_VALUE))
    );
    HealthCPUPokemonContainerLayout.setVerticalGroup(
            HealthCPUPokemonContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HealthCPUPokemonContainerLayout.createSequentialGroup()
                            .addGap(25, 25, 25)
                            .addComponent(HealthCPUPokemon)
                            .addContainerGap(18, Short.MAX_VALUE))
    );

    jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

    SpecialAttackBtn.setText("Ataque Especial");
    SpecialAttackBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        SpecialAttackBtnActionPerformed(evt);
      }
    });

    PhysicAttackBtn.setText("Ataque Físico");
    PhysicAttackBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        PhysicAttackBtnActionPerformed(evt);
      }
    });

    cambiarPokemonBtn.setText("Cambiar Pokemon");
    cambiarPokemonBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cambiarPokemonBtnActionPerformed(evt);
      }
    });

    jLabel1.setText("Menú de combate");

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(31, 31, 31)
                            .addComponent(PhysicAttackBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                            .addComponent(SpecialAttackBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(46, 46, 46))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGap(123, 123, 123)
                                            .addComponent(jLabel1))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGap(109, 109, 109)
                                            .addComponent(cambiarPokemonBtn)))
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(19, 19, 19)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 113, Short.MAX_VALUE)
                                            .addComponent(cambiarPokemonBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(23, 23, 23))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGap(23, 23, 23)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(SpecialAttackBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(PhysicAttackBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
    );

    HealthCPUPokemon1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

    HealthUserPokemon.setText("Vida");

    javax.swing.GroupLayout HealthCPUPokemon1Layout = new javax.swing.GroupLayout(HealthCPUPokemon1);
    HealthCPUPokemon1.setLayout(HealthCPUPokemon1Layout);
    HealthCPUPokemon1Layout.setHorizontalGroup(
            HealthCPUPokemon1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HealthCPUPokemon1Layout.createSequentialGroup()
                            .addGap(62, 62, 62)
                            .addComponent(HealthUserPokemon)
                            .addContainerGap(66, Short.MAX_VALUE))
    );
    HealthCPUPokemon1Layout.setVerticalGroup(
            HealthCPUPokemon1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HealthCPUPokemon1Layout.createSequentialGroup()
                            .addGap(19, 19, 19)
                            .addComponent(HealthUserPokemon)
                            .addContainerGap(22, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(HealthCPUPokemonContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(CPUPokemon, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(UserPokemon, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(HealthCPUPokemon1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(38, 38, 38))
    );
    layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CPUPokemon, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                            .addComponent(HealthCPUPokemonContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(59, 59, 59)
                                            .addComponent(UserPokemon, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(HealthCPUPokemon1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(12, 12, 12)))
                            .addGap(49, 49, 49))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void performAttack(AttackType attackType) {
    if (actualCPUPokemon == null || actualUserPokemon == null) {
      return; // Ensure both pokemons are present
    }

    // User Pokemon attacks CPU Pokemon
    this.actualUserPokemon.attack(this.actualCPUPokemon, attackType);
    // playHitSound(attackType);
    sleepThread();

    // Check if CPU Pokemon is defeated
    if (actualCPUPokemon.getActualHP() <= 0) {
      // Set the defeated status and get the next CPU Pokemon
      actualCPUPokemon.setDefeatd(true);
      actualCPUPokemon = cpuPokedex.getNextPokemon();

      if (actualCPUPokemon == null) {
        // Handle the end of the game
        Game.instance.launchFinishGUI(true);
      }
    } else {
      // CPU Pokemon's turn to attack
      AttackType randomAttack = getRandomAttackType();

      // CPU Pokemon attacks User Pokemon
      this.actualCPUPokemon.attack(this.actualUserPokemon, randomAttack);
      // playHitSound(randomAttack);

      // Check if User Pokemon is defeated
      sleepThread();
      if (actualUserPokemon.getActualHP() <= 0) {
        // Set the defeated status and get the next User Pokemon
        actualUserPokemon.setDefeatd(true);
        actualUserPokemon = userPokedex.getNextPokemon();

        if (actualUserPokemon == null) {
          // Handle the end of the game
          Game.instance.launchFinishGUI(false);
        }
      }
    }

    // Update GUI elements for both CPU and user's Pokemons
    updateCPUPokemon(actualCPUPokemon);
    updateUserPokemon(actualUserPokemon);
  }


  private void SpecialAttackBtnActionPerformed(java.awt.event.ActionEvent evt) {
    performAttack(AttackType.SPECIAL_ATTACK);
  }

  private void PhysicAttackBtnActionPerformed(java.awt.event.ActionEvent evt) {
    performAttack(AttackType.PHYSIC_ATTACK);
  }

  private void cambiarPokemonBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cambiarPokemonBtnActionPerformed
    SwitchPokemonGUI switchPokemonGUI = new SwitchPokemonGUI(this,this.userPokedex);
    switchPokemonGUI.setVisible(true);
  }//GEN-LAST:event_cambiarPokemonBtnActionPerformed


  private void sleepThread() {
    try{
      Thread.sleep(500);
    } catch (InterruptedException e) {
      throw new RuntimeException(e);
    }
  }

  private AttackType getRandomAttackType() {
    int randomAttackTypeValue = random.nextInt(2) + 1;
    return getAttackType(randomAttackTypeValue);
  }

  private AttackType getAttackType(int value) {
    switch (value) {
      case 1:
        return AttackType.PHYSIC_ATTACK;
      case 2:
        return AttackType.SPECIAL_ATTACK;
      default:
        throw new IllegalArgumentException("Invalid AttackType value");
    }
  }

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(PantallaCombate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(PantallaCombate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(PantallaCombate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(PantallaCombate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new PantallaCombate().setVisible(true);
      }
    });
  }

  public void playHitSound(AttackType attackType) {
    try {
      String soundFileName;
      float volume = -25.0f;
      if (attackType == AttackType.PHYSIC_ATTACK) {
        soundFileName = "src/assets/sound/PhysicAttack.wav";
      } else if (attackType == AttackType.SPECIAL_ATTACK) {
        soundFileName = "src/assets/sound/SpecialAttack.wav";
      } else {
        // Default to a generic hit sound
        soundFileName = "src/assets/sound/Hit.wav";
      }

      // Load the audio file
      File soundFile = new File(soundFileName);
      AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(soundFile);

      // Get a Clip object to play the sound
      Clip clip = AudioSystem.getClip();
      clip.open(audioInputStream);
      FloatControl gainControl = (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);
      gainControl.setValue(volume);
      // Play the sound

      clip.start();

      // Wait for the sound to finish playing
      while (!clip.isRunning()) {
        Thread.sleep(10);
      }
      while (clip.isRunning()) {
        Thread.sleep(10);
      }

      // Close the audio input stream and clip
      clip.close();
      audioInputStream.close();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  public Pokedex getUserPokedex() {
    return userPokedex;
  }

  public void setUserPokedex(Pokedex userPokedex) {
    this.userPokedex = userPokedex;
  }

  public Pokedex getCpuPokedex() {
    return cpuPokedex;
  }

  public void setCpuPokedex(Pokedex cpuPokedex) {
    this.cpuPokedex = cpuPokedex;
  }

  public AbstractPokemon getActualUserPokemon() {
    return actualUserPokemon;
  }

  public void setActualUserPokemon(AbstractPokemon actualUserPokemon) {
    this.actualUserPokemon = actualUserPokemon;
  }

  public AbstractPokemon getActualCPUPokemon() {
    return actualCPUPokemon;
  }

  public void setActualCPUPokemon(AbstractPokemon actualCPUPokemon) {
    this.actualCPUPokemon = actualCPUPokemon;
  }

  public Random getRandom() {
    return random;
  }

  public void setRandom(Random random) {
    this.random = random;
  }

  public JLabel getCPUPokemon() {
    return CPUPokemon;
  }

  public void setCPUPokemon(JLabel CPUPokemon) {
    this.CPUPokemon = CPUPokemon;
  }

  public JLabel getHealthCPUPokemon() {
    return HealthCPUPokemon;
  }

  public void setHealthCPUPokemon(JLabel healthCPUPokemon) {
    HealthCPUPokemon = healthCPUPokemon;
  }

  public JPanel getHealthCPUPokemon1() {
    return HealthCPUPokemon1;
  }

  public void setHealthCPUPokemon1(JPanel healthCPUPokemon1) {
    HealthCPUPokemon1 = healthCPUPokemon1;
  }

  public JPanel getHealthCPUPokemonContainer() {
    return HealthCPUPokemonContainer;
  }

  public void setHealthCPUPokemonContainer(JPanel healthCPUPokemonContainer) {
    HealthCPUPokemonContainer = healthCPUPokemonContainer;
  }

  public JLabel getHealthUserPokemon() {
    return HealthUserPokemon;
  }

  public void setHealthUserPokemon(JLabel healthUserPokemon) {
    HealthUserPokemon = healthUserPokemon;
  }

  public JButton getPhysicAttackBtn() {
    return PhysicAttackBtn;
  }

  public void setPhysicAttackBtn(JButton physicAttackBtn) {
    PhysicAttackBtn = physicAttackBtn;
  }

  public JButton getSpecialAttackBtn() {
    return SpecialAttackBtn;
  }

  public void setSpecialAttackBtn(JButton specialAttackBtn) {
    SpecialAttackBtn = specialAttackBtn;
  }

  public JLabel getUserPokemon() {
    return UserPokemon;
  }

  public void setUserPokemon(JLabel userPokemon) {
    UserPokemon = userPokemon;
  }

  public JButton getCambiarPokemonBtn() {
    return cambiarPokemonBtn;
  }

  public void setCambiarPokemonBtn(JButton cambiarPokemonBtn) {
    this.cambiarPokemonBtn = cambiarPokemonBtn;
  }

  public JLabel getjLabel1() {
    return jLabel1;
  }

  public void setjLabel1(JLabel jLabel1) {
    this.jLabel1 = jLabel1;
  }

  public JPanel getjPanel1() {
    return jPanel1;
  }

  public void setjPanel1(JPanel jPanel1) {
    this.jPanel1 = jPanel1;
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel CPUPokemon;
  private javax.swing.JLabel HealthCPUPokemon;
  private javax.swing.JPanel HealthCPUPokemon1;
  private javax.swing.JPanel HealthCPUPokemonContainer;
  private javax.swing.JLabel HealthUserPokemon;
  private javax.swing.JButton PhysicAttackBtn;
  private javax.swing.JButton SpecialAttackBtn;
  private javax.swing.JLabel UserPokemon;
  private javax.swing.JButton cambiarPokemonBtn;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JPanel jPanel1;
  // End of variables declaration//GEN-END:variables
}
